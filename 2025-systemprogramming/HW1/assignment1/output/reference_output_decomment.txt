#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

 







enum state {SINGLE_QUOTE, SQ_BACK_SLASH, DOUBLE_QOUTE, DQ_BACK_SLASH, LINE_COMMENT, BLOCK_COMMENT, POTENTIAL_COMMENT, END_BLOCK_COMMENT, NORMAL};
 
 

int main(void)
{
   
  int ich;
   
  int line_cur, line_com;
   
  char ch;
   
  enum state state = NORMAL;

  line_cur = 1;
  line_com = -1;

   
  while (1) {

    ich = getchar();
    if (ich == EOF) 
      break;

    ch = (char)ich;
     

    switch (state){

      case NORMAL:
         
        if (ch == '\''){  
          state = SINGLE_QUOTE;
          putchar(ch);
        }
         
        else if (ch == '\"'){
          state = DOUBLE_QOUTE;
          putchar(ch);
        }
         
        else if (ch == '/')
          state = POTENTIAL_COMMENT;
        else
          putchar(ch);
        break;

      case SINGLE_QUOTE:
         
        if (ch == '\'')
          state = NORMAL;
         
        else if (ch == '\\')
          state = SQ_BACK_SLASH;
        putchar(ch);
        break;

      case SQ_BACK_SLASH:
         
        putchar(ch);
        state = SINGLE_QUOTE;
        break;

      case DOUBLE_QOUTE:
         
        if (ch == '\"')
          state = NORMAL;
         
        else if (ch == '\\')
          state = DQ_BACK_SLASH;
        putchar(ch);
        break;

      case DQ_BACK_SLASH:
         
        putchar(ch);
        state = DOUBLE_QOUTE;
        break;

      case POTENTIAL_COMMENT:
         
        if (ch == '/'){
          state = LINE_COMMENT;
          putchar(' ');
        }
         
        else if (ch == '*'){
          state = BLOCK_COMMENT;
          line_com = line_cur;     
          putchar(' ');
        }
        else {
          state = NORMAL;
          putchar('/');
          putchar(ch);
        }
        break;

      case LINE_COMMENT:
         
        if (ch == '\n'){
          state = NORMAL;
          putchar('\n');
        }
        break;

      case BLOCK_COMMENT:
         
        if (ch == '*')
          state = END_BLOCK_COMMENT;
        else if (ch == '\n')
          putchar('\n');
        break; 

      case END_BLOCK_COMMENT:
         
        if (ch == '/')
          state = NORMAL;
         
        else if (ch == '*')
          state = END_BLOCK_COMMENT;
         
        else if (ch == '\n'){
          putchar('\n');
          state = BLOCK_COMMENT;
        }
        else
          state = BLOCK_COMMENT;
        break;

      default:
        assert(0);
        break;
    }
  
    if (ch == '\n')
      line_cur++;

  }


   
  if (ich == EOF) {
    switch (state){  

      case NORMAL:
      case SINGLE_QUOTE:
      case SQ_BACK_SLASH:
      case DOUBLE_QOUTE:
      case DQ_BACK_SLASH: 
      case LINE_COMMENT:
        break;

     
      case BLOCK_COMMENT:
      case END_BLOCK_COMMENT:
        fprintf(stderr, "Error: line %d: unterminated comment\n", line_com);
        return(EXIT_FAILURE);
        break;

      case POTENTIAL_COMMENT:
        putchar('/');
        break;
    
      default:
        assert(0);
        break;
    }

    
    
  }
  
  return(EXIT_SUCCESS);
}
